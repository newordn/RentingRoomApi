module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateChamber {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Chamber {
  id: ID!
  createdAt: DateTime!
  localisation: String!
  dimension: String!
  quartier: String!
  description: String!
  prix: Int!
  nombreMois: Int
  aDoucheInterne: Boolean
  aCaution: Boolean
  aPlafond: Boolean
  estCarreler: Boolean
  estLibre: Boolean
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type ChamberConnection {
  pageInfo: PageInfo!
  edges: [ChamberEdge]!
  aggregate: AggregateChamber!
}

input ChamberCreateInput {
  id: ID
  localisation: String!
  dimension: String!
  quartier: String!
  description: String!
  prix: Int!
  nombreMois: Int
  aDoucheInterne: Boolean
  aCaution: Boolean
  aPlafond: Boolean
  estCarreler: Boolean
  estLibre: Boolean
  users: UserCreateManyWithoutChambersInput
}

input ChamberCreateManyWithoutUsersInput {
  create: [ChamberCreateWithoutUsersInput!]
  connect: [ChamberWhereUniqueInput!]
}

input ChamberCreateWithoutUsersInput {
  id: ID
  localisation: String!
  dimension: String!
  quartier: String!
  description: String!
  prix: Int!
  nombreMois: Int
  aDoucheInterne: Boolean
  aCaution: Boolean
  aPlafond: Boolean
  estCarreler: Boolean
  estLibre: Boolean
}

type ChamberEdge {
  node: Chamber!
  cursor: String!
}

enum ChamberOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  localisation_ASC
  localisation_DESC
  dimension_ASC
  dimension_DESC
  quartier_ASC
  quartier_DESC
  description_ASC
  description_DESC
  prix_ASC
  prix_DESC
  nombreMois_ASC
  nombreMois_DESC
  aDoucheInterne_ASC
  aDoucheInterne_DESC
  aCaution_ASC
  aCaution_DESC
  aPlafond_ASC
  aPlafond_DESC
  estCarreler_ASC
  estCarreler_DESC
  estLibre_ASC
  estLibre_DESC
}

type ChamberPreviousValues {
  id: ID!
  createdAt: DateTime!
  localisation: String!
  dimension: String!
  quartier: String!
  description: String!
  prix: Int!
  nombreMois: Int
  aDoucheInterne: Boolean
  aCaution: Boolean
  aPlafond: Boolean
  estCarreler: Boolean
  estLibre: Boolean
}

input ChamberScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  localisation: String
  localisation_not: String
  localisation_in: [String!]
  localisation_not_in: [String!]
  localisation_lt: String
  localisation_lte: String
  localisation_gt: String
  localisation_gte: String
  localisation_contains: String
  localisation_not_contains: String
  localisation_starts_with: String
  localisation_not_starts_with: String
  localisation_ends_with: String
  localisation_not_ends_with: String
  dimension: String
  dimension_not: String
  dimension_in: [String!]
  dimension_not_in: [String!]
  dimension_lt: String
  dimension_lte: String
  dimension_gt: String
  dimension_gte: String
  dimension_contains: String
  dimension_not_contains: String
  dimension_starts_with: String
  dimension_not_starts_with: String
  dimension_ends_with: String
  dimension_not_ends_with: String
  quartier: String
  quartier_not: String
  quartier_in: [String!]
  quartier_not_in: [String!]
  quartier_lt: String
  quartier_lte: String
  quartier_gt: String
  quartier_gte: String
  quartier_contains: String
  quartier_not_contains: String
  quartier_starts_with: String
  quartier_not_starts_with: String
  quartier_ends_with: String
  quartier_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  prix: Int
  prix_not: Int
  prix_in: [Int!]
  prix_not_in: [Int!]
  prix_lt: Int
  prix_lte: Int
  prix_gt: Int
  prix_gte: Int
  nombreMois: Int
  nombreMois_not: Int
  nombreMois_in: [Int!]
  nombreMois_not_in: [Int!]
  nombreMois_lt: Int
  nombreMois_lte: Int
  nombreMois_gt: Int
  nombreMois_gte: Int
  aDoucheInterne: Boolean
  aDoucheInterne_not: Boolean
  aCaution: Boolean
  aCaution_not: Boolean
  aPlafond: Boolean
  aPlafond_not: Boolean
  estCarreler: Boolean
  estCarreler_not: Boolean
  estLibre: Boolean
  estLibre_not: Boolean
  AND: [ChamberScalarWhereInput!]
  OR: [ChamberScalarWhereInput!]
  NOT: [ChamberScalarWhereInput!]
}

type ChamberSubscriptionPayload {
  mutation: MutationType!
  node: Chamber
  updatedFields: [String!]
  previousValues: ChamberPreviousValues
}

input ChamberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChamberWhereInput
  AND: [ChamberSubscriptionWhereInput!]
  OR: [ChamberSubscriptionWhereInput!]
  NOT: [ChamberSubscriptionWhereInput!]
}

input ChamberUpdateInput {
  localisation: String
  dimension: String
  quartier: String
  description: String
  prix: Int
  nombreMois: Int
  aDoucheInterne: Boolean
  aCaution: Boolean
  aPlafond: Boolean
  estCarreler: Boolean
  estLibre: Boolean
  users: UserUpdateManyWithoutChambersInput
}

input ChamberUpdateManyDataInput {
  localisation: String
  dimension: String
  quartier: String
  description: String
  prix: Int
  nombreMois: Int
  aDoucheInterne: Boolean
  aCaution: Boolean
  aPlafond: Boolean
  estCarreler: Boolean
  estLibre: Boolean
}

input ChamberUpdateManyMutationInput {
  localisation: String
  dimension: String
  quartier: String
  description: String
  prix: Int
  nombreMois: Int
  aDoucheInterne: Boolean
  aCaution: Boolean
  aPlafond: Boolean
  estCarreler: Boolean
  estLibre: Boolean
}

input ChamberUpdateManyWithoutUsersInput {
  create: [ChamberCreateWithoutUsersInput!]
  delete: [ChamberWhereUniqueInput!]
  connect: [ChamberWhereUniqueInput!]
  set: [ChamberWhereUniqueInput!]
  disconnect: [ChamberWhereUniqueInput!]
  update: [ChamberUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [ChamberUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [ChamberScalarWhereInput!]
  updateMany: [ChamberUpdateManyWithWhereNestedInput!]
}

input ChamberUpdateManyWithWhereNestedInput {
  where: ChamberScalarWhereInput!
  data: ChamberUpdateManyDataInput!
}

input ChamberUpdateWithoutUsersDataInput {
  localisation: String
  dimension: String
  quartier: String
  description: String
  prix: Int
  nombreMois: Int
  aDoucheInterne: Boolean
  aCaution: Boolean
  aPlafond: Boolean
  estCarreler: Boolean
  estLibre: Boolean
}

input ChamberUpdateWithWhereUniqueWithoutUsersInput {
  where: ChamberWhereUniqueInput!
  data: ChamberUpdateWithoutUsersDataInput!
}

input ChamberUpsertWithWhereUniqueWithoutUsersInput {
  where: ChamberWhereUniqueInput!
  update: ChamberUpdateWithoutUsersDataInput!
  create: ChamberCreateWithoutUsersInput!
}

input ChamberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  localisation: String
  localisation_not: String
  localisation_in: [String!]
  localisation_not_in: [String!]
  localisation_lt: String
  localisation_lte: String
  localisation_gt: String
  localisation_gte: String
  localisation_contains: String
  localisation_not_contains: String
  localisation_starts_with: String
  localisation_not_starts_with: String
  localisation_ends_with: String
  localisation_not_ends_with: String
  dimension: String
  dimension_not: String
  dimension_in: [String!]
  dimension_not_in: [String!]
  dimension_lt: String
  dimension_lte: String
  dimension_gt: String
  dimension_gte: String
  dimension_contains: String
  dimension_not_contains: String
  dimension_starts_with: String
  dimension_not_starts_with: String
  dimension_ends_with: String
  dimension_not_ends_with: String
  quartier: String
  quartier_not: String
  quartier_in: [String!]
  quartier_not_in: [String!]
  quartier_lt: String
  quartier_lte: String
  quartier_gt: String
  quartier_gte: String
  quartier_contains: String
  quartier_not_contains: String
  quartier_starts_with: String
  quartier_not_starts_with: String
  quartier_ends_with: String
  quartier_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  prix: Int
  prix_not: Int
  prix_in: [Int!]
  prix_not_in: [Int!]
  prix_lt: Int
  prix_lte: Int
  prix_gt: Int
  prix_gte: Int
  nombreMois: Int
  nombreMois_not: Int
  nombreMois_in: [Int!]
  nombreMois_not_in: [Int!]
  nombreMois_lt: Int
  nombreMois_lte: Int
  nombreMois_gt: Int
  nombreMois_gte: Int
  aDoucheInterne: Boolean
  aDoucheInterne_not: Boolean
  aCaution: Boolean
  aCaution_not: Boolean
  aPlafond: Boolean
  aPlafond_not: Boolean
  estCarreler: Boolean
  estCarreler_not: Boolean
  estLibre: Boolean
  estLibre_not: Boolean
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  AND: [ChamberWhereInput!]
  OR: [ChamberWhereInput!]
  NOT: [ChamberWhereInput!]
}

input ChamberWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createChamber(data: ChamberCreateInput!): Chamber!
  updateChamber(data: ChamberUpdateInput!, where: ChamberWhereUniqueInput!): Chamber
  updateManyChambers(data: ChamberUpdateManyMutationInput!, where: ChamberWhereInput): BatchPayload!
  upsertChamber(where: ChamberWhereUniqueInput!, create: ChamberCreateInput!, update: ChamberUpdateInput!): Chamber!
  deleteChamber(where: ChamberWhereUniqueInput!): Chamber
  deleteManyChambers(where: ChamberWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  chamber(where: ChamberWhereUniqueInput!): Chamber
  chambers(where: ChamberWhereInput, orderBy: ChamberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chamber]!
  chambersConnection(where: ChamberWhereInput, orderBy: ChamberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChamberConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  chamber(where: ChamberSubscriptionWhereInput): ChamberSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  name: String!
  email: String!
  matricule: String!
  filiere: String!
  option: String!
  password: String!
  chambers(where: ChamberWhereInput, orderBy: ChamberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chamber!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  matricule: String!
  filiere: String!
  option: String!
  password: String!
  chambers: ChamberCreateManyWithoutUsersInput
}

input UserCreateManyWithoutChambersInput {
  create: [UserCreateWithoutChambersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutChambersInput {
  id: ID
  name: String!
  email: String!
  matricule: String!
  filiere: String!
  option: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  matricule_ASC
  matricule_DESC
  filiere_ASC
  filiere_DESC
  option_ASC
  option_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  email: String!
  matricule: String!
  filiere: String!
  option: String!
  password: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  matricule: String
  matricule_not: String
  matricule_in: [String!]
  matricule_not_in: [String!]
  matricule_lt: String
  matricule_lte: String
  matricule_gt: String
  matricule_gte: String
  matricule_contains: String
  matricule_not_contains: String
  matricule_starts_with: String
  matricule_not_starts_with: String
  matricule_ends_with: String
  matricule_not_ends_with: String
  filiere: String
  filiere_not: String
  filiere_in: [String!]
  filiere_not_in: [String!]
  filiere_lt: String
  filiere_lte: String
  filiere_gt: String
  filiere_gte: String
  filiere_contains: String
  filiere_not_contains: String
  filiere_starts_with: String
  filiere_not_starts_with: String
  filiere_ends_with: String
  filiere_not_ends_with: String
  option: String
  option_not: String
  option_in: [String!]
  option_not_in: [String!]
  option_lt: String
  option_lte: String
  option_gt: String
  option_gte: String
  option_contains: String
  option_not_contains: String
  option_starts_with: String
  option_not_starts_with: String
  option_ends_with: String
  option_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  matricule: String
  filiere: String
  option: String
  password: String
  chambers: ChamberUpdateManyWithoutUsersInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
  matricule: String
  filiere: String
  option: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  matricule: String
  filiere: String
  option: String
  password: String
}

input UserUpdateManyWithoutChambersInput {
  create: [UserCreateWithoutChambersInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutChambersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutChambersInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateWithoutChambersDataInput {
  name: String
  email: String
  matricule: String
  filiere: String
  option: String
  password: String
}

input UserUpdateWithWhereUniqueWithoutChambersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutChambersDataInput!
}

input UserUpsertWithWhereUniqueWithoutChambersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutChambersDataInput!
  create: UserCreateWithoutChambersInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  matricule: String
  matricule_not: String
  matricule_in: [String!]
  matricule_not_in: [String!]
  matricule_lt: String
  matricule_lte: String
  matricule_gt: String
  matricule_gte: String
  matricule_contains: String
  matricule_not_contains: String
  matricule_starts_with: String
  matricule_not_starts_with: String
  matricule_ends_with: String
  matricule_not_ends_with: String
  filiere: String
  filiere_not: String
  filiere_in: [String!]
  filiere_not_in: [String!]
  filiere_lt: String
  filiere_lte: String
  filiere_gt: String
  filiere_gte: String
  filiere_contains: String
  filiere_not_contains: String
  filiere_starts_with: String
  filiere_not_starts_with: String
  filiere_ends_with: String
  filiere_not_ends_with: String
  option: String
  option_not: String
  option_in: [String!]
  option_not_in: [String!]
  option_lt: String
  option_lte: String
  option_gt: String
  option_gte: String
  option_contains: String
  option_not_contains: String
  option_starts_with: String
  option_not_starts_with: String
  option_ends_with: String
  option_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  chambers_every: ChamberWhereInput
  chambers_some: ChamberWhereInput
  chambers_none: ChamberWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  matricule: String
}
`
      }
    