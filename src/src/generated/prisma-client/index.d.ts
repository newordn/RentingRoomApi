// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  chamber: (where?: ChamberWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  chamber: (where: ChamberWhereUniqueInput) => ChamberNullablePromise;
  chambers: (args?: {
    where?: ChamberWhereInput;
    orderBy?: ChamberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Chamber>;
  chambersConnection: (args?: {
    where?: ChamberWhereInput;
    orderBy?: ChamberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChamberConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChamber: (data: ChamberCreateInput) => ChamberPromise;
  updateChamber: (args: {
    data: ChamberUpdateInput;
    where: ChamberWhereUniqueInput;
  }) => ChamberPromise;
  updateManyChambers: (args: {
    data: ChamberUpdateManyMutationInput;
    where?: ChamberWhereInput;
  }) => BatchPayloadPromise;
  upsertChamber: (args: {
    where: ChamberWhereUniqueInput;
    create: ChamberCreateInput;
    update: ChamberUpdateInput;
  }) => ChamberPromise;
  deleteChamber: (where: ChamberWhereUniqueInput) => ChamberPromise;
  deleteManyChambers: (where?: ChamberWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  chamber: (
    where?: ChamberSubscriptionWhereInput
  ) => ChamberSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "matricule_ASC"
  | "matricule_DESC"
  | "filiere_ASC"
  | "filiere_DESC"
  | "option_ASC"
  | "option_DESC"
  | "password_ASC"
  | "password_DESC";

export type ChamberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "localisation_ASC"
  | "localisation_DESC"
  | "dimension_ASC"
  | "dimension_DESC"
  | "quartier_ASC"
  | "quartier_DESC"
  | "description_ASC"
  | "description_DESC"
  | "prix_ASC"
  | "prix_DESC"
  | "nombreMois_ASC"
  | "nombreMois_DESC"
  | "aDoucheInterne_ASC"
  | "aDoucheInterne_DESC"
  | "aCaution_ASC"
  | "aCaution_DESC"
  | "aPlafond_ASC"
  | "aPlafond_DESC"
  | "estCarreler_ASC"
  | "estCarreler_DESC"
  | "estLibre_ASC"
  | "estLibre_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithoutChambersDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  matricule?: Maybe<String>;
  filiere?: Maybe<String>;
  option?: Maybe<String>;
  password?: Maybe<String>;
}

export type ChamberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  matricule: String;
  filiere: String;
  option: String;
  password: String;
  chambers?: Maybe<ChamberCreateManyWithoutUsersInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  matricule?: Maybe<String>;
  matricule_not?: Maybe<String>;
  matricule_in?: Maybe<String[] | String>;
  matricule_not_in?: Maybe<String[] | String>;
  matricule_lt?: Maybe<String>;
  matricule_lte?: Maybe<String>;
  matricule_gt?: Maybe<String>;
  matricule_gte?: Maybe<String>;
  matricule_contains?: Maybe<String>;
  matricule_not_contains?: Maybe<String>;
  matricule_starts_with?: Maybe<String>;
  matricule_not_starts_with?: Maybe<String>;
  matricule_ends_with?: Maybe<String>;
  matricule_not_ends_with?: Maybe<String>;
  filiere?: Maybe<String>;
  filiere_not?: Maybe<String>;
  filiere_in?: Maybe<String[] | String>;
  filiere_not_in?: Maybe<String[] | String>;
  filiere_lt?: Maybe<String>;
  filiere_lte?: Maybe<String>;
  filiere_gt?: Maybe<String>;
  filiere_gte?: Maybe<String>;
  filiere_contains?: Maybe<String>;
  filiere_not_contains?: Maybe<String>;
  filiere_starts_with?: Maybe<String>;
  filiere_not_starts_with?: Maybe<String>;
  filiere_ends_with?: Maybe<String>;
  filiere_not_ends_with?: Maybe<String>;
  option?: Maybe<String>;
  option_not?: Maybe<String>;
  option_in?: Maybe<String[] | String>;
  option_not_in?: Maybe<String[] | String>;
  option_lt?: Maybe<String>;
  option_lte?: Maybe<String>;
  option_gt?: Maybe<String>;
  option_gte?: Maybe<String>;
  option_contains?: Maybe<String>;
  option_not_contains?: Maybe<String>;
  option_starts_with?: Maybe<String>;
  option_not_starts_with?: Maybe<String>;
  option_ends_with?: Maybe<String>;
  option_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface ChamberCreateInput {
  id?: Maybe<ID_Input>;
  localisation: String;
  dimension: String;
  quartier: String;
  description: String;
  prix: Int;
  nombreMois?: Maybe<Int>;
  aDoucheInterne?: Maybe<Boolean>;
  aCaution?: Maybe<Boolean>;
  aPlafond?: Maybe<Boolean>;
  estCarreler?: Maybe<Boolean>;
  estLibre?: Maybe<Boolean>;
  users?: Maybe<UserCreateManyWithoutChambersInput>;
}

export interface ChamberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  localisation?: Maybe<String>;
  localisation_not?: Maybe<String>;
  localisation_in?: Maybe<String[] | String>;
  localisation_not_in?: Maybe<String[] | String>;
  localisation_lt?: Maybe<String>;
  localisation_lte?: Maybe<String>;
  localisation_gt?: Maybe<String>;
  localisation_gte?: Maybe<String>;
  localisation_contains?: Maybe<String>;
  localisation_not_contains?: Maybe<String>;
  localisation_starts_with?: Maybe<String>;
  localisation_not_starts_with?: Maybe<String>;
  localisation_ends_with?: Maybe<String>;
  localisation_not_ends_with?: Maybe<String>;
  dimension?: Maybe<String>;
  dimension_not?: Maybe<String>;
  dimension_in?: Maybe<String[] | String>;
  dimension_not_in?: Maybe<String[] | String>;
  dimension_lt?: Maybe<String>;
  dimension_lte?: Maybe<String>;
  dimension_gt?: Maybe<String>;
  dimension_gte?: Maybe<String>;
  dimension_contains?: Maybe<String>;
  dimension_not_contains?: Maybe<String>;
  dimension_starts_with?: Maybe<String>;
  dimension_not_starts_with?: Maybe<String>;
  dimension_ends_with?: Maybe<String>;
  dimension_not_ends_with?: Maybe<String>;
  quartier?: Maybe<String>;
  quartier_not?: Maybe<String>;
  quartier_in?: Maybe<String[] | String>;
  quartier_not_in?: Maybe<String[] | String>;
  quartier_lt?: Maybe<String>;
  quartier_lte?: Maybe<String>;
  quartier_gt?: Maybe<String>;
  quartier_gte?: Maybe<String>;
  quartier_contains?: Maybe<String>;
  quartier_not_contains?: Maybe<String>;
  quartier_starts_with?: Maybe<String>;
  quartier_not_starts_with?: Maybe<String>;
  quartier_ends_with?: Maybe<String>;
  quartier_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  prix?: Maybe<Int>;
  prix_not?: Maybe<Int>;
  prix_in?: Maybe<Int[] | Int>;
  prix_not_in?: Maybe<Int[] | Int>;
  prix_lt?: Maybe<Int>;
  prix_lte?: Maybe<Int>;
  prix_gt?: Maybe<Int>;
  prix_gte?: Maybe<Int>;
  nombreMois?: Maybe<Int>;
  nombreMois_not?: Maybe<Int>;
  nombreMois_in?: Maybe<Int[] | Int>;
  nombreMois_not_in?: Maybe<Int[] | Int>;
  nombreMois_lt?: Maybe<Int>;
  nombreMois_lte?: Maybe<Int>;
  nombreMois_gt?: Maybe<Int>;
  nombreMois_gte?: Maybe<Int>;
  aDoucheInterne?: Maybe<Boolean>;
  aDoucheInterne_not?: Maybe<Boolean>;
  aCaution?: Maybe<Boolean>;
  aCaution_not?: Maybe<Boolean>;
  aPlafond?: Maybe<Boolean>;
  aPlafond_not?: Maybe<Boolean>;
  estCarreler?: Maybe<Boolean>;
  estCarreler_not?: Maybe<Boolean>;
  estLibre?: Maybe<Boolean>;
  estLibre_not?: Maybe<Boolean>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  AND?: Maybe<ChamberWhereInput[] | ChamberWhereInput>;
  OR?: Maybe<ChamberWhereInput[] | ChamberWhereInput>;
  NOT?: Maybe<ChamberWhereInput[] | ChamberWhereInput>;
}

export interface UserCreateManyWithoutChambersInput {
  create?: Maybe<
    UserCreateWithoutChambersInput[] | UserCreateWithoutChambersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface ChamberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChamberWhereInput>;
  AND?: Maybe<ChamberSubscriptionWhereInput[] | ChamberSubscriptionWhereInput>;
  OR?: Maybe<ChamberSubscriptionWhereInput[] | ChamberSubscriptionWhereInput>;
  NOT?: Maybe<ChamberSubscriptionWhereInput[] | ChamberSubscriptionWhereInput>;
}

export interface UserCreateWithoutChambersInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  matricule: String;
  filiere: String;
  option: String;
  password: String;
}

export interface ChamberUpdateManyDataInput {
  localisation?: Maybe<String>;
  dimension?: Maybe<String>;
  quartier?: Maybe<String>;
  description?: Maybe<String>;
  prix?: Maybe<Int>;
  nombreMois?: Maybe<Int>;
  aDoucheInterne?: Maybe<Boolean>;
  aCaution?: Maybe<Boolean>;
  aPlafond?: Maybe<Boolean>;
  estCarreler?: Maybe<Boolean>;
  estLibre?: Maybe<Boolean>;
}

export interface ChamberUpdateInput {
  localisation?: Maybe<String>;
  dimension?: Maybe<String>;
  quartier?: Maybe<String>;
  description?: Maybe<String>;
  prix?: Maybe<Int>;
  nombreMois?: Maybe<Int>;
  aDoucheInterne?: Maybe<Boolean>;
  aCaution?: Maybe<Boolean>;
  aPlafond?: Maybe<Boolean>;
  estCarreler?: Maybe<Boolean>;
  estLibre?: Maybe<Boolean>;
  users?: Maybe<UserUpdateManyWithoutChambersInput>;
}

export interface ChamberScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  localisation?: Maybe<String>;
  localisation_not?: Maybe<String>;
  localisation_in?: Maybe<String[] | String>;
  localisation_not_in?: Maybe<String[] | String>;
  localisation_lt?: Maybe<String>;
  localisation_lte?: Maybe<String>;
  localisation_gt?: Maybe<String>;
  localisation_gte?: Maybe<String>;
  localisation_contains?: Maybe<String>;
  localisation_not_contains?: Maybe<String>;
  localisation_starts_with?: Maybe<String>;
  localisation_not_starts_with?: Maybe<String>;
  localisation_ends_with?: Maybe<String>;
  localisation_not_ends_with?: Maybe<String>;
  dimension?: Maybe<String>;
  dimension_not?: Maybe<String>;
  dimension_in?: Maybe<String[] | String>;
  dimension_not_in?: Maybe<String[] | String>;
  dimension_lt?: Maybe<String>;
  dimension_lte?: Maybe<String>;
  dimension_gt?: Maybe<String>;
  dimension_gte?: Maybe<String>;
  dimension_contains?: Maybe<String>;
  dimension_not_contains?: Maybe<String>;
  dimension_starts_with?: Maybe<String>;
  dimension_not_starts_with?: Maybe<String>;
  dimension_ends_with?: Maybe<String>;
  dimension_not_ends_with?: Maybe<String>;
  quartier?: Maybe<String>;
  quartier_not?: Maybe<String>;
  quartier_in?: Maybe<String[] | String>;
  quartier_not_in?: Maybe<String[] | String>;
  quartier_lt?: Maybe<String>;
  quartier_lte?: Maybe<String>;
  quartier_gt?: Maybe<String>;
  quartier_gte?: Maybe<String>;
  quartier_contains?: Maybe<String>;
  quartier_not_contains?: Maybe<String>;
  quartier_starts_with?: Maybe<String>;
  quartier_not_starts_with?: Maybe<String>;
  quartier_ends_with?: Maybe<String>;
  quartier_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  prix?: Maybe<Int>;
  prix_not?: Maybe<Int>;
  prix_in?: Maybe<Int[] | Int>;
  prix_not_in?: Maybe<Int[] | Int>;
  prix_lt?: Maybe<Int>;
  prix_lte?: Maybe<Int>;
  prix_gt?: Maybe<Int>;
  prix_gte?: Maybe<Int>;
  nombreMois?: Maybe<Int>;
  nombreMois_not?: Maybe<Int>;
  nombreMois_in?: Maybe<Int[] | Int>;
  nombreMois_not_in?: Maybe<Int[] | Int>;
  nombreMois_lt?: Maybe<Int>;
  nombreMois_lte?: Maybe<Int>;
  nombreMois_gt?: Maybe<Int>;
  nombreMois_gte?: Maybe<Int>;
  aDoucheInterne?: Maybe<Boolean>;
  aDoucheInterne_not?: Maybe<Boolean>;
  aCaution?: Maybe<Boolean>;
  aCaution_not?: Maybe<Boolean>;
  aPlafond?: Maybe<Boolean>;
  aPlafond_not?: Maybe<Boolean>;
  estCarreler?: Maybe<Boolean>;
  estCarreler_not?: Maybe<Boolean>;
  estLibre?: Maybe<Boolean>;
  estLibre_not?: Maybe<Boolean>;
  AND?: Maybe<ChamberScalarWhereInput[] | ChamberScalarWhereInput>;
  OR?: Maybe<ChamberScalarWhereInput[] | ChamberScalarWhereInput>;
  NOT?: Maybe<ChamberScalarWhereInput[] | ChamberScalarWhereInput>;
}

export interface UserUpdateManyWithoutChambersInput {
  create?: Maybe<
    UserCreateWithoutChambersInput[] | UserCreateWithoutChambersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutChambersInput[]
    | UserUpdateWithWhereUniqueWithoutChambersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutChambersInput[]
    | UserUpsertWithWhereUniqueWithoutChambersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  matricule?: Maybe<String>;
}>;

export interface UserUpdateWithWhereUniqueWithoutChambersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutChambersDataInput;
}

export interface ChamberUpdateWithWhereUniqueWithoutUsersInput {
  where: ChamberWhereUniqueInput;
  data: ChamberUpdateWithoutUsersDataInput;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  matricule?: Maybe<String>;
  filiere?: Maybe<String>;
  option?: Maybe<String>;
  password?: Maybe<String>;
  chambers?: Maybe<ChamberUpdateManyWithoutUsersInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  matricule?: Maybe<String>;
  matricule_not?: Maybe<String>;
  matricule_in?: Maybe<String[] | String>;
  matricule_not_in?: Maybe<String[] | String>;
  matricule_lt?: Maybe<String>;
  matricule_lte?: Maybe<String>;
  matricule_gt?: Maybe<String>;
  matricule_gte?: Maybe<String>;
  matricule_contains?: Maybe<String>;
  matricule_not_contains?: Maybe<String>;
  matricule_starts_with?: Maybe<String>;
  matricule_not_starts_with?: Maybe<String>;
  matricule_ends_with?: Maybe<String>;
  matricule_not_ends_with?: Maybe<String>;
  filiere?: Maybe<String>;
  filiere_not?: Maybe<String>;
  filiere_in?: Maybe<String[] | String>;
  filiere_not_in?: Maybe<String[] | String>;
  filiere_lt?: Maybe<String>;
  filiere_lte?: Maybe<String>;
  filiere_gt?: Maybe<String>;
  filiere_gte?: Maybe<String>;
  filiere_contains?: Maybe<String>;
  filiere_not_contains?: Maybe<String>;
  filiere_starts_with?: Maybe<String>;
  filiere_not_starts_with?: Maybe<String>;
  filiere_ends_with?: Maybe<String>;
  filiere_not_ends_with?: Maybe<String>;
  option?: Maybe<String>;
  option_not?: Maybe<String>;
  option_in?: Maybe<String[] | String>;
  option_not_in?: Maybe<String[] | String>;
  option_lt?: Maybe<String>;
  option_lte?: Maybe<String>;
  option_gt?: Maybe<String>;
  option_gte?: Maybe<String>;
  option_contains?: Maybe<String>;
  option_not_contains?: Maybe<String>;
  option_starts_with?: Maybe<String>;
  option_not_starts_with?: Maybe<String>;
  option_ends_with?: Maybe<String>;
  option_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  chambers_every?: Maybe<ChamberWhereInput>;
  chambers_some?: Maybe<ChamberWhereInput>;
  chambers_none?: Maybe<ChamberWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpsertWithWhereUniqueWithoutChambersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutChambersDataInput;
  create: UserCreateWithoutChambersInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  matricule?: Maybe<String>;
  filiere?: Maybe<String>;
  option?: Maybe<String>;
  password?: Maybe<String>;
}

export interface ChamberCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  localisation: String;
  dimension: String;
  quartier: String;
  description: String;
  prix: Int;
  nombreMois?: Maybe<Int>;
  aDoucheInterne?: Maybe<Boolean>;
  aCaution?: Maybe<Boolean>;
  aPlafond?: Maybe<Boolean>;
  estCarreler?: Maybe<Boolean>;
  estLibre?: Maybe<Boolean>;
}

export interface ChamberUpsertWithWhereUniqueWithoutUsersInput {
  where: ChamberWhereUniqueInput;
  update: ChamberUpdateWithoutUsersDataInput;
  create: ChamberCreateWithoutUsersInput;
}

export interface ChamberCreateManyWithoutUsersInput {
  create?: Maybe<
    ChamberCreateWithoutUsersInput[] | ChamberCreateWithoutUsersInput
  >;
  connect?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
}

export interface ChamberUpdateManyMutationInput {
  localisation?: Maybe<String>;
  dimension?: Maybe<String>;
  quartier?: Maybe<String>;
  description?: Maybe<String>;
  prix?: Maybe<Int>;
  nombreMois?: Maybe<Int>;
  aDoucheInterne?: Maybe<Boolean>;
  aCaution?: Maybe<Boolean>;
  aPlafond?: Maybe<Boolean>;
  estCarreler?: Maybe<Boolean>;
  estLibre?: Maybe<Boolean>;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  matricule?: Maybe<String>;
  filiere?: Maybe<String>;
  option?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface ChamberUpdateWithoutUsersDataInput {
  localisation?: Maybe<String>;
  dimension?: Maybe<String>;
  quartier?: Maybe<String>;
  description?: Maybe<String>;
  prix?: Maybe<Int>;
  nombreMois?: Maybe<Int>;
  aDoucheInterne?: Maybe<Boolean>;
  aCaution?: Maybe<Boolean>;
  aPlafond?: Maybe<Boolean>;
  estCarreler?: Maybe<Boolean>;
  estLibre?: Maybe<Boolean>;
}

export interface ChamberUpdateManyWithWhereNestedInput {
  where: ChamberScalarWhereInput;
  data: ChamberUpdateManyDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ChamberUpdateManyWithoutUsersInput {
  create?: Maybe<
    ChamberCreateWithoutUsersInput[] | ChamberCreateWithoutUsersInput
  >;
  delete?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
  connect?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
  set?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
  disconnect?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
  update?: Maybe<
    | ChamberUpdateWithWhereUniqueWithoutUsersInput[]
    | ChamberUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | ChamberUpsertWithWhereUniqueWithoutUsersInput[]
    | ChamberUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<ChamberScalarWhereInput[] | ChamberScalarWhereInput>;
  updateMany?: Maybe<
    | ChamberUpdateManyWithWhereNestedInput[]
    | ChamberUpdateManyWithWhereNestedInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  email: String;
  matricule: String;
  filiere: String;
  option: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  matricule: () => Promise<String>;
  filiere: () => Promise<String>;
  option: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  matricule: () => Promise<AsyncIterator<String>>;
  filiere: () => Promise<AsyncIterator<String>>;
  option: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChamber {
  count: Int;
}

export interface AggregateChamberPromise
  extends Promise<AggregateChamber>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChamberSubscription
  extends Promise<AsyncIterator<AggregateChamber>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chamber {
  id: ID_Output;
  createdAt: DateTimeOutput;
  localisation: String;
  dimension: String;
  quartier: String;
  description: String;
  prix: Int;
  nombreMois?: Int;
  aDoucheInterne?: Boolean;
  aCaution?: Boolean;
  aPlafond?: Boolean;
  estCarreler?: Boolean;
  estLibre?: Boolean;
}

export interface ChamberPromise extends Promise<Chamber>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  localisation: () => Promise<String>;
  dimension: () => Promise<String>;
  quartier: () => Promise<String>;
  description: () => Promise<String>;
  prix: () => Promise<Int>;
  nombreMois: () => Promise<Int>;
  aDoucheInterne: () => Promise<Boolean>;
  aCaution: () => Promise<Boolean>;
  aPlafond: () => Promise<Boolean>;
  estCarreler: () => Promise<Boolean>;
  estLibre: () => Promise<Boolean>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChamberSubscription
  extends Promise<AsyncIterator<Chamber>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  localisation: () => Promise<AsyncIterator<String>>;
  dimension: () => Promise<AsyncIterator<String>>;
  quartier: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  prix: () => Promise<AsyncIterator<Int>>;
  nombreMois: () => Promise<AsyncIterator<Int>>;
  aDoucheInterne: () => Promise<AsyncIterator<Boolean>>;
  aCaution: () => Promise<AsyncIterator<Boolean>>;
  aPlafond: () => Promise<AsyncIterator<Boolean>>;
  estCarreler: () => Promise<AsyncIterator<Boolean>>;
  estLibre: () => Promise<AsyncIterator<Boolean>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChamberNullablePromise
  extends Promise<Chamber | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  localisation: () => Promise<String>;
  dimension: () => Promise<String>;
  quartier: () => Promise<String>;
  description: () => Promise<String>;
  prix: () => Promise<Int>;
  nombreMois: () => Promise<Int>;
  aDoucheInterne: () => Promise<Boolean>;
  aCaution: () => Promise<Boolean>;
  aPlafond: () => Promise<Boolean>;
  estCarreler: () => Promise<Boolean>;
  estLibre: () => Promise<Boolean>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChamberEdge {
  node: Chamber;
  cursor: String;
}

export interface ChamberEdgePromise extends Promise<ChamberEdge>, Fragmentable {
  node: <T = ChamberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChamberEdgeSubscription
  extends Promise<AsyncIterator<ChamberEdge>>,
    Fragmentable {
  node: <T = ChamberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ChamberPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  localisation: String;
  dimension: String;
  quartier: String;
  description: String;
  prix: Int;
  nombreMois?: Int;
  aDoucheInterne?: Boolean;
  aCaution?: Boolean;
  aPlafond?: Boolean;
  estCarreler?: Boolean;
  estLibre?: Boolean;
}

export interface ChamberPreviousValuesPromise
  extends Promise<ChamberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  localisation: () => Promise<String>;
  dimension: () => Promise<String>;
  quartier: () => Promise<String>;
  description: () => Promise<String>;
  prix: () => Promise<Int>;
  nombreMois: () => Promise<Int>;
  aDoucheInterne: () => Promise<Boolean>;
  aCaution: () => Promise<Boolean>;
  aPlafond: () => Promise<Boolean>;
  estCarreler: () => Promise<Boolean>;
  estLibre: () => Promise<Boolean>;
}

export interface ChamberPreviousValuesSubscription
  extends Promise<AsyncIterator<ChamberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  localisation: () => Promise<AsyncIterator<String>>;
  dimension: () => Promise<AsyncIterator<String>>;
  quartier: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  prix: () => Promise<AsyncIterator<Int>>;
  nombreMois: () => Promise<AsyncIterator<Int>>;
  aDoucheInterne: () => Promise<AsyncIterator<Boolean>>;
  aCaution: () => Promise<AsyncIterator<Boolean>>;
  aPlafond: () => Promise<AsyncIterator<Boolean>>;
  estCarreler: () => Promise<AsyncIterator<Boolean>>;
  estLibre: () => Promise<AsyncIterator<Boolean>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  email: String;
  matricule: String;
  filiere: String;
  option: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  matricule: () => Promise<String>;
  filiere: () => Promise<String>;
  option: () => Promise<String>;
  password: () => Promise<String>;
  chambers: <T = FragmentableArray<Chamber>>(args?: {
    where?: ChamberWhereInput;
    orderBy?: ChamberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  matricule: () => Promise<AsyncIterator<String>>;
  filiere: () => Promise<AsyncIterator<String>>;
  option: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  chambers: <T = Promise<AsyncIterator<ChamberSubscription>>>(args?: {
    where?: ChamberWhereInput;
    orderBy?: ChamberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  matricule: () => Promise<String>;
  filiere: () => Promise<String>;
  option: () => Promise<String>;
  password: () => Promise<String>;
  chambers: <T = FragmentableArray<Chamber>>(args?: {
    where?: ChamberWhereInput;
    orderBy?: ChamberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChamberSubscriptionPayload {
  mutation: MutationType;
  node: Chamber;
  updatedFields: String[];
  previousValues: ChamberPreviousValues;
}

export interface ChamberSubscriptionPayloadPromise
  extends Promise<ChamberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChamberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChamberPreviousValuesPromise>() => T;
}

export interface ChamberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChamberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChamberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChamberPreviousValuesSubscription>() => T;
}

export interface ChamberConnection {
  pageInfo: PageInfo;
  edges: ChamberEdge[];
}

export interface ChamberConnectionPromise
  extends Promise<ChamberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChamberEdge>>() => T;
  aggregate: <T = AggregateChamberPromise>() => T;
}

export interface ChamberConnectionSubscription
  extends Promise<AsyncIterator<ChamberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChamberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChamberSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Chamber",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
